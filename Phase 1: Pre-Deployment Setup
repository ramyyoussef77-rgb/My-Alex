🚀 My Alex App Deployment Guide

Phase 1: Pre-Deployment Setup

1. Environment Configuration

// app/build.gradle
android {
    compileSdk 34
    
    defaultConfig {
        applicationId "com.myalex.alexandria"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0.0"
    }
    
    buildTypes {
        debug {
            buildConfigField "String", "FACEBOOK_ACCESS_TOKEN", "\"${project.findProperty("FACEBOOK_ACCESS_TOKEN") ?: ""}\""
            buildConfigField "String", "OPENAI_API_KEY", "\"${project.findProperty("OPENAI_API_KEY") ?: ""}\""
            buildConfigField "String", "MAPS_API_KEY", "\"${project.findProperty("MAPS_API_KEY") ?: ""}\""
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "FACEBOOK_ACCESS_TOKEN", "\"${project.findProperty("FACEBOOK_ACCESS_TOKEN") ?: ""}\""
            buildConfigField "String", "OPENAI_API_KEY", "\"${project.findProperty("OPENAI_API_KEY") ?: ""}\""
            buildConfigField "String", "MAPS_API_KEY", "\"${project.findProperty("MAPS_API_KEY") ?: ""}\""
            
            signingConfig signingConfigs.release
        }
    }
    
    signingConfigs {
        release {
            storeFile file('../keystore/myalex-release.jks')
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }
}

2. Create Release Keystore

# Generate release keystore
keytool -genkey -v -keystore myalex-release.jks -keyalg RSA -keysize 2048 -validity 10000 -alias myalex

# Store keystore info securely
echo "KEYSTORE_PASSWORD=your_keystore_password" >> .env
echo "KEY_ALIAS=myalex" >> .env
echo "KEY_PASSWORD=your_key_password" >> .env

Phase 2: Firebase Setup & Configuration

1. Firebase Project Setup

# Install Firebase CLI
npm install -g firebase-tools

# Login to Firebase
firebase login

# Initialize Firebase project
firebase init

# Select:
# - Firestore
# - Functions
# - Hosting
# - Storage

2. Firebase Configuration Files

// firebase.json
{
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "functions": {
    "source": "functions",
    "runtime": "nodejs18",
    "predeploy": ["npm --prefix \"$RESOURCE_DIR\" run build"]
  },
  "storage": {
    "rules": "storage.rules"
  },
  "hosting": {
    "public": "admin-panel/build",
    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

3. Firestore Security Rules

// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat rooms - location-based access
    match /chatRooms/{roomId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        resource.data.members[request.auth.uid] == true;
    }
    
    // Messages - room members only
    match /chatRooms/{roomId}/messages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
    }
    
    // Complaints - users can create, admins can manage
    match /complaints/{complaintId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Historical places - read only for users
    match /historicalPlaces/{placeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Services - read for all, write for verified users
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.submittedBy || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
  }
}

4. Cloud Functions Deployment

// functions/index.js
const functions = require('firebase-functions');
const admin = require('firebase-admin');
const axios = require('axios');

admin.initializeApp();

// Facebook news fetching
exports.fetchFacebookNews = functions.pubsub
  .schedule('every 30 minutes')
  .onRun(async (context) => {
    const pages = [
      '1CuNA8fLsW', '19FucQXpny', '14GTdbckaVK',
      '1B981DguFm', '17AVC5M4Uk', '1CFFKVd3jz', '16mFj19vcE'
    ];
    
    for (const pageId of pages) {
      try {
        const response = await axios.get(
          `https://graph.facebook.com/v18.0/${pageId}/posts`,
          {
            params: {
              access_token: functions.config().facebook.access_token,
              fields: 'id,message,created_time,permalink_url,attachments,from',
              limit: 4
            }
          }
        );
        
        await admin.firestore()
          .collection('newsCache')
          .doc(pageId)
          .set({
            posts: response.data.data,
            lastFetched: admin.firestore.FieldValue.serverTimestamp()
          });
      } catch (error) {
        console.error(`Error fetching posts for ${pageId}:`, error);
      }
    }
  });

// Message moderation
exports.moderateMessage = functions.firestore
  .document('chatRooms/{roomId}/messages/{messageId}')
  .onCreate(async (snap, context) => {
    const message = snap.data();
    
    // Simple content filtering
    const bannedWords = ['spam', 'inappropriate', 'سب', 'شتيمة'];
    const containsBannedWord = bannedWords.some(word => 
      message.text.toLowerCase().includes(word.toLowerCase())
    );
    
    if (containsBannedWord) {
      await snap.ref.update({
        isModerated: true,
        moderationReason: 'Inappropriate content detected'
      });
    }
  });

// Complaint escalation
exports.escalateComplaint = functions.firestore
  .document('complaints/{complaintId}')
  .onWrite(async (change, context) => {
    if (!change.after.exists) return;
    
    const complaint = change.after.data();
    const createdAt = complaint.createdAt.toDate();
    const now = new Date();
    const hoursDiff = (now - createdAt) / (1000 * 60 * 60);
    
    // Auto-escalate after 48 hours
    if (hoursDiff > 48 && complaint.status === 'pending' && complaint.escalationLevel < 2) {
      await change.after.ref.update({
        escalationLevel: complaint.escalationLevel + 1,
        priority: complaint.priority === 'low' ? 'medium' : 
                 complaint.priority === 'medium' ? 'high' : 'critical'
      });
    }
  });

Phase 3: API Keys & External Services

1. Google Services Setup

# Enable required APIs in Google Cloud Console:
# - Maps SDK for Android
# - Places API
# - Geocoding API
# - Firebase APIs

# Get your API keys and add to gradle.properties:
echo "MAPS_API_KEY=your_maps_api_key" >> gradle.properties

2. Facebook Developer Setup

# Create Facebook App at developers.facebook.com
# Get access token for Graph API
echo "FACEBOOK_ACCESS_TOKEN=your_facebook_token" >> gradle.properties

3. OpenAI API Setup

# Get OpenAI API key from platform.openai.com
echo "OPENAI_API_KEY=your_openai_key" >> gradle.properties

Phase 4: Build & Deploy Process

1. Automated Build Script

#!/bin/bash
# deploy.sh

echo "🚀 Starting My Alex App Deployment..."

# Clean and build
echo "📦 Building release APK..."
./gradlew clean
./gradlew assembleRelease

# Deploy Firebase Functions
echo "☁️ Deploying Firebase Functions..."
firebase deploy --only functions

# Deploy Firestore rules
echo "🔒 Deploying Firestore rules..."
firebase deploy --only firestore:rules

# Deploy to Firebase App Distribution
echo "📱 Deploying to App Distribution..."
firebase appdistribution:distribute app/build/outputs/apk/release/app-release.apk \
  --app 1:123456789:android:abcdef \
  --groups "testers" \
  --release-notes "Latest version with all features"

echo "✅ Deployment completed!"

2. GitHub Actions CI/CD

# .github/workflows/deploy.yml
name: Deploy My Alex App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        
    - name: Create keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks
        
    - name: Build Release APK
      run: ./gradlew assembleRelease
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
        FACEBOOK_ACCESS_TOKEN: ${{ secrets.FACEBOOK_ACCESS_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Deploy Firebase Functions
      run: firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }}
      
    - name: Deploy to Firebase App Distribution
      run: |
        firebase appdistribution:distribute app/build/outputs/apk/release/app-release.apk \
          --app ${{ secrets.FIREBASE_APP_ID }} \
          --groups "testers" \
          --release-notes "Automated deployment from GitHub Actions" \
          --token ${{ secrets.FIREBASE_TOKEN }}

Phase 5: Google Play Store Deployment

1. Play Console Setup

# Create Play Console account
# Upload first APK manually
# Set up app listing with:
# - App name: "My Alex - Alexandria Community"
# - Description in Arabic and English
# - Screenshots for different screen sizes
# - Privacy policy URL

2. App Bundle for Play Store

// build.gradle - Enable App Bundle
android {
    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
}

# Build App Bundle
./gradlew bundleRelease

# Upload to Play Console
# Use Play Console or automated deployment

3. Automated Play Store Deployment

# Add to GitHub Actions
- name: Deploy to Play Store
  uses: r0adkll/upload-google-play@v1
  with:
    serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
    packageName: com.myalex.alexandria
    releaseFiles: app/build/outputs/bundle/release/app-release.aab
    track: internal
    status: completed

Phase 6: Monitoring & Analytics Setup

1. Firebase Analytics Configuration

// Application class
class MyAlexApplication : Application() {
    override fun onCreate() {
        super.onCreate()
        
        // Initialize Firebase Analytics
        FirebaseAnalytics.getInstance(this)
        
        // Initialize Crashlytics
        FirebaseCrashlytics.getInstance()
    }
}

2. Performance Monitoring

// Add to key activities
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        val trace = FirebasePerformance.getInstance().newTrace("main_activity_load")
        trace.start()
        
        super.onCreate(savedInstanceState)
        
        trace.stop()
    }
}

Phase 7: Admin Dashboard Deployment

1. React Admin Panel

# Create admin panel
npx create-react-app admin-panel
cd admin-panel

# Install Firebase Admin SDK
npm install firebase-admin
npm install @mui/material @emotion/react @emotion/styled

2. Deploy Admin Panel

# Build admin panel
npm run build

# Deploy to Firebase Hosting
firebase deploy --only hosting

Phase 8: Final Deployment Checklist

Pre-Launch Checklist

All API keys configured and working

Firebase project set up with proper security rules

App signed with release keystore

Privacy policy and terms of service created

App tested on multiple devices and Android versions

Arabic/English localization tested

Offline functionality verified

Push notifications working

Analytics and crash reporting configured

Admin dashboard deployed and accessible

Launch Day Tasks

# 1. Final build and deploy
./deploy.sh

# 2. Monitor Firebase Console for:
# - User registrations
# - Crash reports
# - Performance metrics
# - Database usage

# 3. Check Google Play Console for:
# - App reviews
# - Installation metrics
# - Crash reports

# 4. Social media announcement
# - Facebook page post
# - Local Alexandria groups
# - Community forums

Phase 9: Post-Launch Monitoring

1. Key Metrics to Track

// Firebase Analytics custom events
analytics.logEvent('app_launched');
analytics.logEvent('chat_message_sent', { room_id: roomId });
analytics.logEvent('complaint_submitted', { category: category });
analytics.logEvent('ar_place_viewed', { place_id: placeId });

2. Performance Monitoring

# Monitor these metrics:
# - App startup time
# - Screen load times
# - Network request latency
# - Battery usage
# - Memory consumption

Deployment Commands Summary

# Complete deployment process
git clone https://github.com/yourusername/my-alex-app.git
cd my-alex-app

# Set up environment
cp .env.example .env
# Fill in your API keys

# Build and deploy
chmod +x deploy.sh
./deploy.sh

# Monitor deployment
firebase functions:log
firebase hosting:channel:list

This comprehensive deployment guide covers everything needed to get your "My Alex" Alexandria community app live and running. The deployment includes:

Development Environment setup

Firebase Backend configuration

External API integrations

Automated CI/CD pipeline

Google Play Store deployment

Admin Dashboard hosting

Monitoring & Analytics setup

Post-launch maintenance

Would you like me to elaborate on any specific part of the deployment process or help you with setting up any particular component?
